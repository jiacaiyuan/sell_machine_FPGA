module yjc(CLOCK_27,SW,KEY,LEDG,HEX7,HEX6,HEX5,HEX4,HEX2,HEX1,HEX0,HEX3);  //jc_yuan's perfect
//declare the port
input CLOCK_27;
input [17:0]SW;
input [3:0] KEY;
output [7:0] LEDG;
output [6:0] HEX7,HEX6,HEX5,HEX4,HEX2,HEX1,HEX0,HEX3;//HEX3 is for the state change
//declare the type of the port
wire [17:0]SW;
wire [3:0] KEY;//the key is posedge or negedge don't know
reg [7:0] LEDG;
reg [6:0] HEX7,HEX6,HEX5,HEX4,HEX2,HEX1,HEX0,HEX3;
//the meduim value and the state
reg [4:0] current_state;
reg [4:0] next_state;
reg [4:0] given_money;
reg [4:0] need_money;
reg [4:0] change_money;
//the parameter of value
parameter idle=5'b00001,goods=5'b00010,pay=5'b00100,commit=5'b01000,change=5'b10000;
parameter zero=7'b1000000,one=7'b1111001,two=7'b0100100,three=7'b0110000;
parameter four=7'b0011001,five=7'b0010010,six=7'b0000010,seven=7'b1111000;
parameter eight=7'b0000000,nine=7'b0010000;
//stage one: the update of state
always @(posedge CLOCK_27 or negedge KEY[0])
  begin
    if(!KEY[0])
      begin
        current_state<=idle;
      end
    else
      begin
        current_state<=next_state;
      end
  end
//stage two:the calculate of next_state
always @(SW or current_state or given_money or need_money or change_money)
  begin
    case (current_state)
      idle:
        begin
          given_money=0;
	  need_money=0;
          change_money=0;
          if((SW[0]|SW[1]|SW[2]))
            begin 
            //  LEDG[5]=1;  this is for test
             // next_state=goods;
              if(SW[2])
                need_money=20;  //20
              else if(SW[1])
                need_money=14;  //14
              else if(SW[0])
                need_money=10;   //10
              else 
                need_money=0;
              next_state=goods;
            end
          else
            begin
              next_state=current_state;
            end
        end
      goods:
        begin
          if(SW[16])
            begin
              next_state=pay;
            end
          else
            begin
              next_state=current_state;
            end
        end
      pay:
        begin
          if(SW[10]|SW[9]|SW[8])
             begin
              // next_state=commit;
               if(SW[10])
                 given_money=given_money+10;
               else if(SW[9])
                 given_money=given_money+5;
               else if(SW[8])
                 given_money=given_money+1;
               else
                 given_money=given_money;
             end
           else
             begin
               next_state=current_state;
             end
           if(given_money<need_money)
             begin
               next_state=current_state;
             end
           else if(given_money>=need_money)
             begin
              next_state=commit;
             end
           else 
             begin
               next_state=current_state;
             end
         end
      commit:      //only the money is enough then you can cancel to buy it,else it's wrong!!! 
        begin
          if(SW[17])
            begin
              next_state=idle;
              change_money=given_money;
            end
          else 
            begin
              if(given_money==need_money)
                begin
                  change_money=0;
                  next_state=idle;
                end
              else if(given_money>need_money)
                next_state=change;
              else
                next_state=current_state;
            end
        end
      change:
        begin
          change_money=given_money-need_money;
          if(SW[15])
            next_state=idle;
          else
            next_state=current_state;
        end        
      default:
        begin
	  next_state=current_state;
        end
    endcase
  end
//stage three: the output of state
always@(SW or current_state or given_money or need_money or change_money)
  begin
    case (current_state)
      idle:
        begin
          LEDG[0]=0;
          LEDG[7]=0;
          HEX5=zero;  HEX4=zero;
          HEX2=zero;  HEX1=zero;   HEX0=zero;  //the initial value
          HEX3=zero;//the state is idle
          if(SW[2])
            begin HEX7=two;HEX6=zero;  end//20
          else if(SW[1])
            begin HEX7=one;HEX6=four;  end //14     5:0010010
          else if(SW[0])
            begin HEX7=one;HEX6=zero;   end
          else
            begin HEX7=zero;HEX6=zero;   end
        end
      goods:
        begin
          HEX3=one;//the state is goods
        end
      pay:
        begin
          HEX3=two;//the state is pay
          case (given_money)
            0:begin HEX5=zero;HEX4=zero; end
            1:begin HEX5=zero;HEX4=one; end
            2:begin HEX5=zero;HEX4=two; end
            3:begin HEX5=zero;HEX4=three; end
            4:begin HEX5=zero;HEX4=four; end
            5:begin HEX5=zero;HEX4=five; end
            6:begin HEX5=zero;HEX4=six; end
            7:begin HEX5=zero;HEX4=seven; end
            8:begin HEX5=zero;HEX4=eight; end
            9:begin HEX5=zero;HEX4=nine; end
            10:begin HEX5=one;HEX4=zero;end
            11:begin HEX5=one;HEX4=one; end
            12:begin HEX5=one;HEX4=two; end
            13:begin HEX5=one;HEX4=three; end
            14:begin HEX5=one;HEX4=four; end
            15:begin HEX5=one;HEX4=five; end
            16:begin HEX5=one;HEX4=six; end
            17:begin HEX5=one;HEX4=seven; end
            18:begin HEX5=one;HEX4=eight; end
            19:begin HEX5=one;HEX4=nine; end
            20:begin HEX5=one;HEX4=zero;end
            default:begin HEX5=zero;HEX4=zero; end
          endcase
        end
      commit:
        begin
          HEX3=three;
          if(given_money>=need_money)
            LEDG[0]=1;
          else
            LEDG[0]=0;
          case(change_money)
            0:begin HEX0=zero;HEX1=zero;HEX2=zero;end
            1:begin HEX0=one;HEX1=zero;HEX2=zero;end
            2:begin HEX0=two;HEX1=zero;HEX2=zero;end
            3:begin HEX0=three;HEX1=zero;HEX2=zero;end
            4:begin HEX0=four;HEX1=zero;HEX2=zero;end

            5:begin HEX0=zero;HEX1=one;HEX2=zero;end
            6:begin HEX0=one;HEX1=one;HEX2=zero;end
            7:begin HEX0=two;HEX1=one;HEX2=zero;end
            8:begin HEX0=three;HEX1=one;HEX2=zero;end
            9:begin HEX0=four;HEX1=one;HEX2=zero;end

            10:begin HEX0=zero;HEX1=zero;HEX2=one;end
            11:begin HEX0=one;HEX1=zero;HEX2=one;end
            12:begin HEX0=two;HEX1=zero;HEX2=one;end
            13:begin HEX0=three;HEX1=zero;HEX2=one;end
            14:begin HEX0=four;HEX1=zero;HEX2=one;end

            15:begin HEX0=zero;HEX1=one;HEX2=one;end
            16:begin HEX0=one;HEX1=one;HEX2=one;end
            17:begin HEX0=one;HEX1=one;HEX2=one;end
            18:begin HEX0=one;HEX1=one;HEX2=one;end
            19:begin HEX0=one;HEX1=one;HEX2=one;end
            20:begin HEX0=one;HEX1=one;HEX2=one;end
            default:begin HEX0=zero;HEX1=zero;HEX2=zero;end
          endcase
        end
      change: 
        begin
          HEX3=four;
          if(SW[15])
            LEDG[7]=1;
          else
            LEDG[7]=0;
          case(change_money)
            0:begin HEX0=zero;HEX1=zero;HEX2=zero;end
            1:begin HEX0=one;HEX1=zero;HEX2=zero;end
            2:begin HEX0=two;HEX1=zero;HEX2=zero;end
            3:begin HEX0=three;HEX1=zero;HEX2=zero;end
            4:begin HEX0=four;HEX1=zero;HEX2=zero;end

            5:begin HEX0=zero;HEX1=one;HEX2=zero;end
            6:begin HEX0=one;HEX1=one;HEX2=zero;end
            7:begin HEX0=two;HEX1=one;HEX2=zero;end
            8:begin HEX0=three;HEX1=one;HEX2=zero;end
            9:begin HEX0=four;HEX1=one;HEX2=zero;end

            10:begin HEX0=zero;HEX1=zero;HEX2=one;end
            default:begin HEX0=zero;HEX1=zero;HEX2=zero;end
           endcase
        end
    endcase
  end
endmodule
        
          